<bean id="appProperties"
    class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
        <list>
            <value>classpath:webLogic.properties</value>
          <!--   <value>classpath:database.properties</value> -->
        </list>
    </property>
</bean>
<bean id="jndiTemplate" class="org.springframework.jndi.JndiTemplate">
		<property name="environment">
			<props>
				<prop key="java.naming.provider.url">${java.naming.provider.url}</prop>
				<prop key="java.naming.factory.initial">${java.naming.factory.initial}</prop>
			</props>
		</property>
</bean>

<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="defaultDestination" ref="destination" />
		<property name="pubSubDomain" value="true" />
		<property name="deliveryPersistent" value="true" />
		<property name="deliveryMode" value="2" />
</bean>


<bean id="connectionFactory" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiTemplate" ref="jndiTemplate" />
		<property name="jndiName" value="${connectionFactory.jndiName}" />
</bean>
<bean id="destination" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiTemplate" ref="jndiTemplate" />
		<property name="jndiName" value="${destination.jndiName}" />

</bean>


<bean id="orderReceiver" class="mytest.spring.jms.listener.MyOrderReceiver">
		<property name="jmsTemplate" ref="jmsTemplate" />
</bean>
MyOrderReceiver wil have jmsTemplate with setter & getter use  Message message = jmsTemplate.receive();
=======================
Asynch Receiver Way One
<bean id="OrderListener"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer" destroy-method="destroy">
				 <property name="maxConcurrentConsumers" value="5" />
		
		<property name="concurrentConsumers" value="3" />
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="destination" />
		<property name="maxMessagesPerTask" value="1" />
			<property name="receiveTimeout" value="5000" />
		<property name="autoStartup" value="true" />
		 <property name="cacheLevelName" value="CACHE_CONSUMER" />
		 <property name="messageListener" ref="listener-audit" />
		 <!-- 		<property name="messageListener" ref="orderListener" />
 -->
		                               
	</bean>

	<!--<bean id="orderListener" class="poc.spring.jms.listener.InvoiceMDB"/>--> (public void onMessage(Message message) {)

 
Asynch Receiver way2

<bean id="listener-audit" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
		<property name="delegate" ref="myDelegator" /> 
		<property name="defaultListenerMethod" value="processMessage" />
		<property name="messageConverter" ref="simpleMsgConverter" />
</bean>

<bean id="myDelegator" class="poc.spring.jms.listener.MyDelegator">
   		 
</bean>
<bean id="simpleMsgConverter" class="org.springframework.jms.support.converter.SimpleMessageConverter"></bean>

==================SENDER================

 <bean id="messageSender" class="poc.spring.jms.sender.MessageSender">
        <property name="jmsTemplate" ref="jmsTemplate"/>
    </bean>
 public void sendMesage() {
		 Document doc = parseXml(readFormFile());
		final  String xmlPayload = getXmlAsString(doc);
			MessageCreator messageCreator=new MessageCreator() {
			public Message createMessage(Session session) throws
			JMSException {
			return session.createTextMessage(xmlPayload);}
			};

			jmsTemplate.send( messageCreator);
		}

	
	